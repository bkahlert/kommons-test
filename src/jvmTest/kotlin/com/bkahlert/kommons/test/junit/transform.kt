package com.bkahlert.kommons.test.junit

import io.kotest.assertions.throwables.shouldThrow
import org.junit.jupiter.api.DynamicContainer
import org.junit.jupiter.api.DynamicNode
import org.junit.jupiter.api.DynamicTest
import org.junit.jupiter.api.function.Executable
import java.net.URI
import java.util.stream.Stream
import kotlin.streams.asSequence
import kotlin.streams.asStream

/** Deeply transforms tests in this test hierarchy using the specified [transform]. */
fun Stream<out DynamicNode>.transform(transform: (DynamicTest) -> (DynamicTest)): Stream<DynamicNode> =
    asSequence().transform(transform).asStream()

/** Deeply transforms tests in this test hierarchy using the specified [transform]. */
fun Iterable<DynamicNode>.transform(transform: (DynamicTest) -> (DynamicTest)): Iterable<DynamicNode> =
    asSequence().transform(transform).asIterable()

/** Deeply transforms tests in this test hierarchy using the specified [transform]. */
fun Sequence<DynamicNode>.transform(transform: (DynamicTest) -> (DynamicTest)): Sequence<DynamicNode> =
    map { it.transform(transform) }

/** Deeply transforms tests in potential test hierarchy using the specified [transform]. */
private fun DynamicNode.transform(transform: (DynamicTest) -> (DynamicTest)): DynamicNode = when (this) {
    is DynamicContainer -> transform(transform)
    is DynamicTest -> transform.invoke(this)
    else -> error("Unknown ${DynamicNode::class.simpleName} type ${this::class}")
}

/** Deeply transforms tests in this test container using the specified [transform]. */
private fun DynamicContainer.transform(transform: (DynamicTest) -> (DynamicTest)): DynamicContainer =
    testSourceUri.map { DynamicContainer.dynamicContainer(displayName, it, children.transform(transform)) }
        .orElseGet { DynamicContainer.dynamicContainer(displayName, children.transform(transform)) }

/**
 * Returns a new [DynamicTest] with
 * - its [DynamicTest.displayName] generated by applying the specified [displayName] to the current [DynamicTest.displayName],
 * - its [DynamicTest.testSourceUri] generated by applying the specified [testSourceUri] to the current [DynamicTest.testSourceUri],
 * - and its [DynamicTest.executable] generated by applying the specified [executable] to the current [DynamicTest.executable]. */
fun DynamicTest.transform(
    displayName: (String) -> String = { it },
    testSourceUri: (URI?) -> URI? = { it },
    executable: (() -> Unit) -> Unit = { it() },
): DynamicTest {
    val transformedDisplayName = displayName(this.displayName)
    val transformedTestSourceUri = this.testSourceUri.map { testSourceUri(it) }.orElseGet { testSourceUri(null) }
    val transformedExecutable = Executable { executable { this.executable.execute() } }
    return transformedTestSourceUri
        ?.let { DynamicTest.dynamicTest(transformedDisplayName, it, transformedExecutable) }
        ?: DynamicTest.dynamicTest(transformedDisplayName, transformedExecutable)
}

inline fun <reified E : Throwable> DynamicTest.toExceptionExpectingTest(): DynamicTest =
    transform(
        displayName = { "expect to fail â†’ $it" },
        executable = {
            shouldThrow<E> { it() }
        },
    )
